var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getId } from "./misc.js";
export var Forum;
(function (Forum) {
    let Post;
    (function (Post) {
        /**
         * Edit a ForumPost! Note that it can be the initial one of a ForumTopic!
         * @scope {@link Scope"forum.write"}
         * @param post The post or the id of the post in question
         * @param new_text The new content of the post (replaces the old content)
         * @returns The edited ForumPost
         */
        function edit(post, new_text) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.request("put", `forums/posts/${getId(post)}`, { body: new_text });
            });
        }
        Post.edit = edit;
    })(Post = Forum.Post || (Forum.Post = {}));
    let Topic;
    (function (Topic) {
        /**
         * Create a new ForumTopic in the forum of your choice!
         * @scope {@link Scope"forum.write"}
         * @param forum_id The id of the forum you're creating your topic in
         * @param title The topic's title
         * @param text The first post's content/message
         * @param poll If you want to make a poll, specify the parameters of that poll!
         * @returns An object with the topic you've made, and its first initial post (which uses your `text`)
         * @remarks Some users may not be allowed to do that, such as newly registered users, so this can 403 even with the right scopes
         */
        function create(forum_id, title, text, poll) {
            return __awaiter(this, void 0, void 0, function* () {
                const with_poll = poll !== undefined;
                const options = (poll === null || poll === void 0 ? void 0 : poll.options) !== undefined ? poll.options.toString().replace(/,/g, "\n") : undefined;
                return yield this.request("post", "forums/topics", { forum_id, title, body: text, with_poll, forum_topic_poll: poll ? {
                        title: poll.title,
                        options: options,
                        length_days: poll.length_days,
                        max_options: poll.max_options || 1,
                        vote_change: poll.vote_change || false,
                        hide_results: poll.hide_results || false,
                    } : undefined });
            });
        }
        Topic.create = create;
        /**
         * Make and send a Forum.Post in a Forum.Topic!
         * @scope {@link Scope"forum.write"}
         * @param topic The topic or the id of the topic you're making your reply in
         * @param text Your reply! Your message!
         * @returns The reply you've made, as a Forum.Post!
         * @remarks Replying when the last post was made by the authorized user will likely cause the server to return a 403
         */
        function reply(topic, text) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.request("post", `forums/topics/${getId(topic)}/reply`, { body: text });
            });
        }
        Topic.reply = reply;
        /**
         * Edit the title of a Forum.Topic!
         * @scope {@link Scope"forum.write"}
         * @param topic The topic or the id of the topic in question
         * @param new_title The new title of the topic
         * @returns The edited ForumTopic
         * @remarks Use `editForumPost` if you wanna edit the post at the top of the topic
         */
        function editTitle(topic, new_title) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.request("put", `forums/topics/${getId(topic)}`, { forum_topic: { topic_title: new_title } });
            });
        }
        Topic.editTitle = editTitle;
    })(Topic = Forum.Topic || (Forum.Topic = {}));
    /**
     * Get a forum topic, as well as its main post (content) and the posts that were sent in it!
     * @param topic An object with the id of the topic in question
     * @param config How many results maximum, how to sort them, etc...
     * @remarks The oldest post of a topic is the text of a topic
     */
    function getTopicAndPosts(topic, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const start = (config === null || config === void 0 ? void 0 : config.sort) === "id_asc" && (config === null || config === void 0 ? void 0 : config.first_post) ? getId(config.first_post) : undefined;
            const end = (config === null || config === void 0 ? void 0 : config.sort) === "id_desc" && (config === null || config === void 0 ? void 0 : config.first_post) ? getId(config.first_post) : undefined;
            return yield this.request("get", `forums/topics/${getId(topic)}`, { start, end, sort: config === null || config === void 0 ? void 0 : config.sort, limit: config === null || config === void 0 ? void 0 : config.limit, cursor_string: config === null || config === void 0 ? void 0 : config.cursor_string });
        });
    }
    Forum.getTopicAndPosts = getTopicAndPosts;
})(Forum || (Forum = {}));
