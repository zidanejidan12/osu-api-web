var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Ruleset } from "./index.js";
import { getId } from "./misc.js";
export var Ranking;
(function (Ranking) {
    /**
     * Get the top players of the game, with some filters!
     * @param ruleset Self-explanatory, is also known as "Gamemode"
     * @param type Rank players by their performance points or by their ranked score?
     * @param config Specify which page, country, filter out non-friends...
     */
    function getUser(ruleset, type, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `rankings/${Ruleset[ruleset]}/${type}`, { page: config === null || config === void 0 ? void 0 : config.page, filter: config === null || config === void 0 ? void 0 : config.filter, country: config === null || config === void 0 ? void 0 : config.country, variant: config === null || config === void 0 ? void 0 : config.variant });
        });
    }
    Ranking.getUser = getUser;
    /**
     * Get the top countries of a specific ruleset!
     * @param ruleset On which Ruleset should the countries be compared?
     * @param page Imagine the array you get as a page, it can only have a maximum of 50 countries, while 50 others may be on the next one (defaults to **1**)
     */
    function getCountry(ruleset, page = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `rankings/${Ruleset[ruleset]}/country`, { page });
        });
    }
    Ranking.getCountry = getCountry;
    /** Get the top 50 players who have the most total kudosu! */
    function getKudosu() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.request("get", "rankings/kudosu");
            return response.ranking; // It's the only property
        });
    }
    Ranking.getKudosu = getKudosu;
    /**
     * Get the rankings of a spotlight from 2009 to 2020 on a specific ruleset!
     * @param ruleset Each spotlight has a different ranking (and often maps) depending on the ruleset
     * @param spotlight The spotlight in question
     * @param filter What kind of players do you want to see? Keep in mind `friends` has no effect if no authorized user (defaults to **all**)
     */
    function getSpotlight(ruleset, spotlight, filter = "all") {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `rankings/${Ruleset[ruleset]}/charts`, { spotlight: getId(spotlight), filter });
        });
    }
    Ranking.getSpotlight = getSpotlight;
})(Ranking || (Ranking = {}));
