var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export var Event;
(function (Event) {
    /**
     * Get everything note-worthy that happened on osu! recently!
     * @param sort "id_asc" to have the oldest recent event first, "id_desc" to have the newest instead (defaults to **id_desc**)
     * @param cursor_string Use a response's `cursor_string` with the same parameters to get the next "page" of results, so `events` in this instance!
     */
    function getMultiple(sort = "id_desc", cursor_string) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", "events", { sort, cursor_string });
        });
    }
    Event.getMultiple = getMultiple;
})(Event || (Event = {}));
