var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Ruleset } from "./index.js";
import { getId } from "./misc.js";
export var User;
(function (User) {
    // FUNCTIONS
    /**
     * Get extensive user data about the authorized user
     * @scope {@link Scope"identify"}
     * @param ruleset The data should be relevant to which ruleset? (defaults to **user's default Ruleset**)
     */
    function getResourceOwner(ruleset) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", "me", { mode: ruleset });
        });
    }
    User.getResourceOwner = getResourceOwner;
    /**
     * Get extensive user data about whoever you want!
     * @param user A user id, a username or a `User` object!
     * @param ruleset The data should be relevant to which ruleset? (defaults to **user's default Ruleset**)
     */
    function getOne(user, ruleset) {
        return __awaiter(this, void 0, void 0, function* () {
            const mode = ruleset !== undefined ? Ruleset[ruleset] : "";
            if (typeof user === "string")
                return yield this.request("get", `users/${user}/${mode}`, { key: "username" });
            if (typeof user === "number")
                return yield this.request("get", `users/${user}/${mode}`, { key: "id" });
            return yield this.request("get", `users/${user.id}/${mode}`, { key: "id" });
        });
    }
    User.getOne = getOne;
    /**
     * Get user data for up to 50 users at once!
     * @param users An array containing user ids or/and `User` objects!
     */
    function getMultiple(users) {
        return __awaiter(this, void 0, void 0, function* () {
            const ids = users.map((user) => getId(user));
            const response = yield this.request("get", "users", { ids });
            return response.users; // It's the only property
        });
    }
    User.getMultiple = getMultiple;
    /**
     * Get "notable" scores from a user
     * @param user The user who set the scores
     * @param type Do you want scores: in the user's top 100, that are top 1 on a beatmap, that have been recently set?
     * @param ruleset The Ruleset the scores were made in (defaults to **user's default Ruleset**)
     * @param include Do you also want lazer scores and failed scores? (defaults to **true for lazer** & **false for fails**)
     * @param config Array limit & offset
     */
    function getScores(user, type, ruleset, include = { lazer: true, fails: false }, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const mode = ruleset !== undefined ? Ruleset[ruleset] : undefined;
            return yield this.request("get", `users/${getId(user)}/scores/${type}`, { mode, limit: config === null || config === void 0 ? void 0 : config.limit, offset: config === null || config === void 0 ? void 0 : config.offset, legacy_only: Number(!include.lazer), include_fails: String(Number(include.fails)) });
        });
    }
    User.getScores = getScores;
    /**
     * Get beatmaps favourited or made by a user!
     * @param user The user in question
     * @param type The relation between the user and the beatmaps
     * @param config Array limit & offset
     */
    function getBeatmaps(user, type, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `users/${getId(user)}/beatmapsets/${type}`, { limit: config === null || config === void 0 ? void 0 : config.limit, offset: config === null || config === void 0 ? void 0 : config.offset });
        });
    }
    User.getBeatmaps = getBeatmaps;
    /**
     * Get the beatmaps most played by a user!
     * @param user The user who played the beatmaps
     * @param config Array limit & offset
     */
    function getMostPlayed(user, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `users/${getId(user)}/beatmapsets/most_played`, { limit: config === null || config === void 0 ? void 0 : config.limit, offset: config === null || config === void 0 ? void 0 : config.offset });
        });
    }
    User.getMostPlayed = getMostPlayed;
    /**
     * Get an array of Events of different `type`s that relate to a user's activity during the last 31 days! (or 100 activities, whatever comes first)
     * @param user The user in question
     * @param config Array limit & offset
     */
    function getRecentActivity(user, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `users/${getId(user)}/recent_activity`, { limit: config === null || config === void 0 ? void 0 : config.limit, offset: config === null || config === void 0 ? void 0 : config.offset });
        });
    }
    User.getRecentActivity = getRecentActivity;
    /**
     * Get data about the activity of a user kudosu-wise!
     * @param user The user in question
     * @param config Array limit & offset
     */
    function getKudosu(user, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `users/${getId(user)}/kudosu`, { limit: config === null || config === void 0 ? void 0 : config.limit, offset: config === null || config === void 0 ? void 0 : config.offset });
        });
    }
    User.getKudosu = getKudosu;
    /**
     * Get user data of each friend of the authorized user
     * @scope {@link Scope"friends.read"}
     */
    function getFriends() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", "friends");
        });
    }
    User.getFriends = getFriends;
})(User || (User = {}));
