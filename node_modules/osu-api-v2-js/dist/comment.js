var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getId } from "./misc.js";
/**  Remove so-called "Deleted Items" / items that lack an id, add a "deleted_commentable_meta" and make it the number of removed objects */
function removeDeletedItems(bundle) {
    const commentable_meta = bundle.commentable_meta.filter((c) => c.id);
    bundle.deleted_commentable_meta = bundle.commentable_meta.length - commentable_meta.length;
    bundle.commentable_meta = commentable_meta;
    return bundle;
}
export var Comment;
(function (Comment) {
    /**
     * Get a specific comment by using its id!
     * @param comment The comment in question
     */
    function getOne(comment) {
        return __awaiter(this, void 0, void 0, function* () {
            return removeDeletedItems(yield this.request("get", `comments/${getId(comment)}`));
        });
    }
    Comment.getOne = getOne;
    /**
     * Get comments that meet any of your requirements!
     * @param from From where are the comments coming from? Maybe a beatmapset, but then, which beatmapset?
     * @param parent The comments are replying to which comment? Make the id 0 to filter out replies (and only get top level comments)
     * @param sort Should the comments be sorted by votes? Should they be from after a certain date? Maybe you can give a cursor?
     */
    function getMultiple(from, parent, sort) {
        return __awaiter(this, void 0, void 0, function* () {
            const after = (sort === null || sort === void 0 ? void 0 : sort.after) ? String(getId(sort.after)) : undefined;
            const parent_id = parent ? String(getId(parent)) : undefined;
            return removeDeletedItems(yield this.request("get", "comments", {
                after, commentable_type: from === null || from === void 0 ? void 0 : from.type, commentable_id: from === null || from === void 0 ? void 0 : from.id,
                cursor: sort === null || sort === void 0 ? void 0 : sort.cursor, parent_id, sort: sort === null || sort === void 0 ? void 0 : sort.type
            }));
        });
    }
    Comment.getMultiple = getMultiple;
})(Comment || (Comment = {}));
