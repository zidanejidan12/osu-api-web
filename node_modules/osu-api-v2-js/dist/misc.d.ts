import { API } from "./index.js";
/**
 * Scopes determine what the API instance can do as a user!
 * https://osu.ppy.sh/docs/index.html#scopes
 * @remarks "identify" is always implicity provided, **"public" is implicitly needed for almost everything!!**
 * The need for the "public" scope is only made explicit when the function can't be used unless the application acts as as a user (non-guest)
 */
export type Scope = "chat.read" | "chat.write" | "chat.write_manage" | "delegate" | "forum.write" | "friends.read" | "identify" | "public";
export type Mod = {
    acronym: string;
    settings?: {
        [k: string]: any;
    };
};
export declare enum Ruleset {
    osu = 0,
    taiko = 1,
    fruits = 2,
    mania = 3
}
/** @obtainableFrom {@link API.getSpotlights} */
export interface Spotlight {
    id: number;
    name: string;
    start_date: Date;
    end_date: Date;
    type: string;
    /** Pretty sure this is only `true` when the spotlight has different beatmaps for each ruleset */
    mode_specific: boolean;
}
export declare namespace Spotlight {
    interface WithParticipantcount extends Spotlight {
        participant_count: number;
    }
    /**
     * Get ALL legacy spotlights! (2009-2020, somewhat known as charts/ranking charts, available @ https://osu.ppy.sh/rankings/osu/charts)
     * @remarks The data for newer spotlights (2020-, somewhat known as seasons) can be obtained through `getRoom()`
     * but you can't really get the id of those newer spotlights without going through the website's URLs (https://osu.ppy.sh/seasons/latest) as far as I know :(
     */
    function getAll(this: API): Promise<Spotlight[]>;
}
/**
 * When using `fetch()` for a GET request, you can't just give the parameters the same way you'd give them for a POST request!
 * @param parameters The parameters as they'd be for a POST request (prior to using `JSON.stringify`)
 * @returns Parameters adapted for a GET request
 */
export declare function adaptParametersForGETRequests(parameters: {
    [k: string]: any;
}): {
    [k: string]: any;
};
/**
 * Some stuff doesn't have the right type to begin with, such as dates, which are being returned as strings, this fixes that
 * @param x Anything, but should be a string, an array that contains a string, or an object which has a string
 * @returns x, but with it (or what it contains) now having the correct type
 */
export declare function correctType(x: any): any;
/**
 * This is an alternative to `AbortSignal.any` that is friendly to older versions of Node.js, it was provided by the kind https://github.com/baileyherbert
 * @param signals The multiple signals you'd want `fetch()` to take
 * @returns A signal that's aborted when any of the `signals` is aborted
 */
export declare function anySignal(signals: AbortSignal[]): AbortSignal;
/**
 * A function that makes it easy to get the id from the argument of a function
 * @param arg The id or the object with the id
 * @returns The id
 */
export declare function getId(arg: number | {
    [key: string]: any;
}, property_name?: string): number;
