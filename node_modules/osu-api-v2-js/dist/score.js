var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getId } from "./misc.js";
export var Score;
(function (Score) {
    /**
     * Get the replay for a score!
     * @scope {@link Scope"public"}
     * @param score The score that has created the replay
     * @returns The correctly encoded content of what would be a replay file (you can just fs.writeFileSync with it!)
     */
    function getReplay(score) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request("get", `scores/${getId(score)}/download`);
        });
    }
    Score.getReplay = getReplay;
})(Score || (Score = {}));
